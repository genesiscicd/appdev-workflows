# This is a workflow to being called from appdev-devops repo in genesiscicd
#  NPM web build workflow v0.0.1

name: Site Deploy

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true
      SLACK_WEBHOOK:
        required: true


env:
  REPO_NAME: ${{ inputs.repo_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
      SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK}}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Env Variable Setup for nightly builds off default-branch
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' }}
        run: |
              echo "PRODUCT_BASE=$(pwd)" >> $GITHUB_ENV
              echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV #NOTE: only works with SSH repo urls + will cause issues with bny_investments
              echo "CLIENT_DIR=$([[ $(git describe --tags) = [A-Z]* ]] && echo $(ls | grep -- $(echo -$(git describe --tags | cut -d"_" -f1 | tr "[:upper:]" "[:lower:]")) | rev | cut -c 1- | rev))" >> $GITHUB_ENV
              echo "CLIENT_NAME=$([[ $(git describe --tags) = [A-Z]* ]] && echo $(ls | grep -- $(echo -$(git describe --tags | cut -d"_" -f1 | tr "[:upper:]" "[:lower:]")) | rev | cut -c 1- | rev | cut -c 1- | rev | cut -d"-" -f 1 | rev ))" >> $GITHUB_ENV
              echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
              echo "The current location is :"
              pwd
              for i in ./*
              do 
                  if [ -d "$i/snt" ]
                  then
                    echo "WEB_VERSION=$(grep "web_version" $(find $i/snt/ -name product.yml) | awk -F ':' '{print $2}' | sed 's/ //g')" >> $GITHUB_ENV
                    echo "SERVER_VERSION=$(grep "server_version" $(find  $i/snt/ -name product.yml) |  awk -F ':' '{print $2}'| sed 's/ //g')" >> $GITHUB_ENV
                    sed -i "s/${{ env.WEB_VERSION }}/${{ inputs.branch }}/g" ${{ env.PRODUCT_BASE }}/$i/snt/product.yml
                    sed -i "s/${{ env.SERVER_VERSION }}/${{ inputs.branch }}/g" ${{ env.PRODUCT_BASE }}/$i/snt/product.yml
                  else
                    echo "$i not a directory"
                 fi
              done
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-site-specific-${{ inputs.branch }}.zip" >> $GITHUB_ENV

      - name: check env variables
        run: |
              echo "$(git describe --tags)"
              echo "Product Name: ${{ env.PRODUCT_NAME }}"
              echo "Version: ${{ env.VERSION }}"
              echo "Product Base: ${{ env.PRODUCT_BASE }}"
              echo "Output: ${{ env.OUTPUT }}"

      - name: Download server pom and assign auth and genesis versions
        run: |
             curl -sSf -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -LO 'https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/server/pom-${{ env.SERVER_VERSION }}.xml'
             echo pom-${{ env.SERVER_VERSION }}.xml
             echo "AUTH_VERSION=$(echo "$(echo "$(grep -m 1 "<auth.version>" $(find . -maxdepth 1 -name pom-${{env.SERVER_VERSION}}.xml) | sed -n 's:.*<auth.version>\(.*\)</auth.version>.*:\1:p')")")" >> $GITHUB_ENV
             echo "GENESIS_VERSION=$(echo "$(echo "$(grep -m 1 "<genesis.version>" $(find . -maxdepth 1 -name pom-${{env.SERVER_VERSION}}.xml) | sed -n 's:.*<genesis.version>\(.*\)</genesis.version>.*:\1:p')")")" >> $GITHUB_ENV
               #download auth distribution into server_downloads folder
             mkdir distros
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}/distros" https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/auth-distribution/"${{env.AUTH_VERSION}}"/auth-distribution-"${{env.AUTH_VERSION}}"-bin.zip
             #download genesis framework
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}/distros" https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/genesis-distribution/"${{ env.GENESIS_VERSION }}"/genesis-distribution-"${{ env.GENESIS_VERSION }}"-bin.zip
             #download server into server_downloads folder
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}/distros"  https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/server/genesisproduct-"${{ env.PRODUCT_NAME }}"-"${{ env.SERVER_VERSION }}"-bin.zip

             
      - name: Package + Deploy Site
        run: |
             sudo apt-get install zip
             cd ${{ env.PRODUCT_BASE }}
             for i in ./*
              do 
                if [ -d "$i/snt" ]
                then
                    echo "CLIENT_DIR=$i" >> $GITHUB_ENV
                    echo "CLIENT_NAME=$(echo $i | sed "s/${{ env.REPO_NAME }}\-//g")
                    mkdir ${{ env.CLIENT_NAME }}_server_downloads
                    cd ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/src
                    # Create artifact contaiing files from src/site-specific/ usually cfg and assembly folders
                    zip -r ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/${{ env.OUTPUT }} site-specific/*
                    # upload the site-specific artifac contaiing src/site-specific/* to jfrog
                    curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/site/${{env.CLIENT_NAME}}/${{env.OUTPUT}}" -T ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/${{env.OUTPUT}}
                    cp ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/${{env.OUTPUT}} ${{env.PRODUCT_BASE}}/${{ env.CLIENT_NAME }}_server_downloads
                    cd snt
                    #download modules into server_downloads folder
                    if [[ $(grep -c "genesis_modules" $i/product.yml) -ge 1 ]]; 
                      then
                        echo "$(sed -e '1,/genesis_modules/d'  < ./product.yml | grep "^  - { ")" > /tmp/edited_product.yml
                        while read line
                            do
                             echo wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/${{ env.CLIENT_NAME }}_server_downloads https://genesisglobal.jfrog.io/artifactory/product/$((grep -oP '(?<=name:).*?(?=,)' <<< $line)|awk '$1=$1')/server/genesisproduct-$((grep -oP '(?<=name:).*?(?=,)' <<< $line) | awk '$1=$1')-$((grep -oP '(?<=version: )[^ ]*' <<< $line)|awk '$1=$1' )-bin.zip
                          done < /tmp/edited_product.yml
                          cat /tmp/edited_product.yml
                        rm /tmp/edited_product.yml
                    fi
                    echo $(pwd)
                    ls -a
                    cd ${{ env.PRODUCT_BASE }}
                    ls -la
                    cd ${{env.PRODUCT_BASE}}
                    mkdir ${{ env.CLIENT_NAME }}_web_downloads
                    
                    if [ "$WEB_VERSION" == "" ]; then
             
                      echo "Product Name: ${{ env.PRODUCT_NAME }}"
                      #download web
                      echo "PWD after module download: $(pwd)"
                      cd ../..
                      cd ${{ env.CLIENT_NAME }}_web_downloads
                      echo "this is the present directory: $(pwd)"
                      echo "List of files in pwd:$(ls -a)"
                      #  unzip \*.zip
                      touch temp
                      tar czvf /tmp/genesis_${{ env.PRODUCT_NAME }}_web.tar.gz *
                      cd ../${{ env.CLIENT_NAME }}_server_downloads 
                    else
                      #download web
                      echo "PWD after module download: $(pwd)"
                      wget --user=${{ secrets.JFROG_USERNAME }} --password="${{ secrets.JFROG_PASSWORD }}" -P "${{ env.PRODUCT_BASE }}/${{ env.CLIENT_NAME }}_web_downloads" https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/web/"${{ env.PRODUCT_NAME }}"-web-"${{ env.WEB_VERSION }}".zip
                      cd ${{ env.CLIENT_NAME }}_web_downloads
                      echo "this is the present directory: $(pwd)"
                      echo "List of files in pwd:$(ls -a)"
                      unzip \*.zip
                      tar czvf /tmp/genesis_${{ env.PRODUCT_NAME }}_web.tar.gz *
                      cd ../${{ env.CLIENT_NAME }}_server_downloads   
                    fi
                cp -r ${{env.PRODUCT_BASE}}/distros  ${{ env.CLIENT_NAME }}_server_downloads
                echo "displaying files in ${{ env.CLIENT_NAME }}_server_downloads folder: $(ls -a)"
                unzip \*.zip
                ls
                rm *.zip
                tar czvf /tmp/genesis_${{env.PRODUCT_NAME}}_package.tar.gz *
                ls -lart /tmp/*.tar*

                echo "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3QgeG1sbnM9Imh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMCIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy9QT00vNC4wLjAgaHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZCI+CiAgICA8bW9kZWxWZXJzaW9uPjQuMC4wPC9tb2RlbFZlcnNpb24+CiAgICA8Z3JvdXBJZD5nbG9iYWwuZ2VuZXNpczwvZ3JvdXBJZD4KICAgIDxhcnRpZmFjdElkPmdlbmVzaXMtcnBtPC9hcnRpZmFjdElkPgogICAgPHZlcnNpb24+MS4wLjA8L3ZlcnNpb24+CiAgICA8cGFja2FnaW5nPnBvbTwvcGFja2FnaW5nPgogICAgPG5hbWU+Z2VuZXNpcy1ycG08L25hbWU+CiAgICA8cHJvcGVydGllcz4KCQk8cHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5VVEYtODwvcHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz4KCTwvcHJvcGVydGllcz4KICAgIDxtb2R1bGVzLz4KICAgIDxidWlsZD4KICAgICAgICA8cGx1Z2lucz4KICAgICAgICAgICAgPHBsdWdpbj4KICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5jb2RlaGF1cy5tb2pvPC9ncm91cElkPgogICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+cnBtLW1hdmVuLXBsdWdpbjwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgIDx2ZXJzaW9uPjIuMi4wPC92ZXJzaW9uPgogICAgICAgICAgICAgICAgPGluaGVyaXRlZD5mYWxzZTwvaW5oZXJpdGVkPgogICAgICAgICAgICAgICAgPGNvbmZpZ3VyYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+Z2VuZXNpcy1QUk9EVUNUPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDxsaWNlbnNlPihjKSBnZW5lc2lzLmdsb2JhbDwvbGljZW5zZT4KICAgICAgICAgICAgICAgICAgICA8bmVlZGFyY2g+eDg2XzY0PC9uZWVkYXJjaD4KICAgICAgICAgICAgICAgICAgICA8Z3JvdXA+R2VuZXNpcyBQbGF0Zm9ybTwvZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgPHBvc3RpbnN0YWxsU2NyaXB0bGV0PgogICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0RmlsZT4vdG1wL2luc3RhbGwuc2g8L3NjcmlwdEZpbGU+CiAgICAgICAgICAgICAgICAgICAgPC9wb3N0aW5zdGFsbFNjcmlwdGxldD4KICAgICAgICAgICAgICAgICAgICA8bWFwcGluZ3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtYXBwaW5nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpcmVjdG9yeT4vdG1wLzwvZGlyZWN0b3J5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbGVtb2RlPjc1MDwvZmlsZW1vZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlcm5hbWU+cm9vdDwvdXNlcm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBuYW1lPnJvb3Q8L2dyb3VwbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2VzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbj4vdG1wL2dlbmVzaXNfUFJPRFVDVF9wYWNrYWdlLnRhci5nejwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zb3VyY2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NvdXJjZXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFwcGluZz4KICAgICAgICAgICAgICAgICAgICAgICAgPG1hcHBpbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGlyZWN0b3J5Pi90bXAvPC9kaXJlY3Rvcnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlsZW1vZGU+NzUwPC9maWxlbW9kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1c2VybmFtZT5yb290PC91c2VybmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cG5hbWU+cm9vdDwvZ3JvdXBuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uPi90bXAvZ2VuZXNpc19QUk9EVUNUX3dlYi50YXIuZ3o8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc291cmNlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zb3VyY2VzPgogICAgICAgICAgICAgICAgICAgICAgICA8L21hcHBpbmc+CiAgICAgICAgICAgICAgICAgICAgPC9tYXBwaW5ncz4KICAgICAgICAgICAgICAgIDwvY29uZmlndXJhdGlvbj4KICAgICAgICAgICAgPC9wbHVnaW4+CiAgICAgICAgPC9wbHVnaW5zPgogICAgPC9idWlsZD4KPC9wcm9qZWN0Pg==" | base64 -d > pom.xml

                sed -i "s/PRODUCT/$PRODUCT_NAME/g" pom.xml
                echo "pom completed"
                if [ $(test -f /tmp/install.sh && echo 1 || echo 0) -eq 1  ]
                then
                  rm /tmp/install.sh
                fi
                echo "install.sh start"
              
                echo "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKZXhlYyAxPi9wcm9jLyRQUElEL2ZkLzEKZXhlYyAyPi9wcm9jLyRQUElEL2ZkLzIKCiMjIFNldCB0aGUgcHJvZHVjdCB1c2VyIGFuZCBncm91cCBpZiBzcGVjaWZpZWQKCmdlbmVzaXNfdXNlcj0iZ2VuZXNpc1VzZXIiCmdlbmVzaXNfZ3JwPSJnZW5lc2lzVXNlciIKcm9vdF9kaXI9ImRhdGEiCnNlcnZlcl9kaXI9JChkYXRlICslWSVtJWQtJUglTSkKCmlmIFsgISAkKHRlc3QgLWQgL3Zhci9sb2cvZ2VuZXNpc19zZXJ2aWNlICAmJiBlY2hvIDEgfHwgZWNobyAwKSAtZXEgMSAgXQp0aGVuCiAgICBzdWRvIGluc3RhbGwgLWQgL3Zhci9sb2cvZ2VuZXNpc19zZXJ2aWNlIC1vICRnZW5lc2lzX3VzZXIgLW0gNzUwCmVsc2UgCiAgICBlY2hvICIvdmFyL2xvZy9nZW5lc2lzX3NlcnZpY2UgaXMgYWxyZWFkeSBwcmVzZW50IgpmaQoKZWNobyAiRGVmYXVsdCBnZW5lc2lzX3VzZXIgaXM6ICRnZW5lc2lzX3VzZXIiCmVjaG8gIkRlZmF1bHQgdXNlciBncm91cCBpcyAkZ2VuZXNpc19ncnAiCmVjaG8gIkRlZmF1bHQgaW5zdGFsbGF0aW9uIGRpcmVjdG9yeSBpczogJGdlbmVzaXNfdXNlciIKCgppZiBbICQodGVzdCAtZiAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mICYmIGVjaG8gMSB8fCBlY2hvIDApIC1lcSAxIF0gJiYgWyAkKGdyZXAgZ2VuZXNpc191c2VyIC1pYyAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSAtZ3QgMCBdCnRoZW4KICAgIGVjaG8gIk5ldyBnZW5lc2lzX3VzZXIgcHJvdmlkZWQgaW4gdGhlIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgaXM6ICRnZW5lc2lzX3VzZXIiCiAgICBnZW5lc2lzX3VzZXI9JChncmVwIGdlbmVzaXNfdXNlciAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mIHwgY3V0IC1kICc9JyAtZiAyKQpmaQoKaWYgWyAkKHRlc3QgLWYgL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZiAmJiBlY2hvIDEgfHwgZWNobyAwKSAtZXEgMSBdICYmIFsgJChncmVwIGdlbmVzaXNfZ3JwIC1pYyAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSAtZ3QgMCBdCnRoZW4KICAgIGVjaG8gIk5ldyBnZW5lc2lzIHVzZXIgZ3JvdXAgcHJvdmlkZWQgaW4gdGhlIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgaXM6ICRnZW5lc2lzX2dycCIKICAgIGdlbmVzaXNfZ3JwPSQoZ3JlcCBnZW5lc2lzX2dycCAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mIHwgY3V0IC1kICc9JyAtZiAyKQpmaQoKaWYgWyAkKHRlc3QgLWYgL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZiAmJiBlY2hvIDEgfHwgZWNobyAwKSAtZXEgMSBdICYmIFsgJChncmVwIHJvb3RfZGlyIC1pYyAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSAtZ3QgMCBdCnRoZW4KICAgIGVjaG8gIk5ldyBpbnN0YWxsYXRpb24gZGlyZWN0b3J5IHByb3ZpZGVkIGluIHRoZSAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mIGlzOiAkcm9vdF9kaXIiCiAgICByb290X2Rpcj0kKGdyZXAgcm9vdF9kaXIgL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZiB8IGN1dCAtZCAnPScgLWYgMikKZmkKCiNDcmVhdGUgZ2VuZXNpcyB1c2VyIGlmIGRvZXNuJ3QgZXhpc3QKZWNobyAiQ3JlYXRlICRnZW5lc2lzX3VzZXIgaWYgZG9lc24ndCBleGlzdCIKaWYgWyAkKHRlc3QgLWQgL2hvbWUvJGdlbmVzaXNfdXNlciAmJiBlY2hvIDEgfHwgZWNobyAwKSAtZXEgMCBdCnRoZW4KICAgIGVjaG8gIkNyZWF0aW5nICRnZW5lc2lzX3VzZXIgLi4uLiAiCiAgICBzdWRvIGFkZHVzZXIgLW0gJGdlbmVzaXNfdXNlcgogICAgZWNobyAkZ2VuZXNpc191c2VyIiAgICAgICAgICBzb2Z0ICAgICBucHJvYyAgICAgICAgICAxNjM4NCIgfCBzdWRvIHRlZSAtYSAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgICBlY2hvICRnZW5lc2lzX3VzZXIiICAgICAgICAgIGhhcmQgICAgIG5wcm9jICAgICAgICAgIDE2Mzg0IiB8IHN1ZG8gdGVlIC1hIC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICAgIGVjaG8gJGdlbmVzaXNfdXNlciIgICAgICAgICAgc29mdCAgICAgbm9maWxlICAgICAgICAgNjU1MzYiIHwgc3VkbyB0ZWUgLWEgL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogICAgZWNobyAkZ2VuZXNpc191c2VyIiAgICAgICAgICBoYXJkICAgICBub2ZpbGUgICAgICAgICA2NTUzNiIgfCBzdWRvIHRlZSAtYSAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCmVsc2UKICAgIGVjaG8gIlVzZXIgcHJlc2VudC4gQ2Fycnlpbmcgb24gLi4gICIKZmkKCiMgQmFja3VwIGtleXMgdG8gL3RtcC9rZXlzLwppZiBbWyAtZCAvaG9tZS8kZ2VuZXNpc191c2VyL3J1bi9ydW50aW1lL2tleXMgXV0KdGhlbgogICAgZWNobyAiRGlyZWN0b3J5IGtleXMgZXhpc3RzIGluIHJ1bnRpbWUuIiAKICAgIGVjaG8gIk1vdmluZyBrZXlzIHRvIC90bXAvIgogICAgY3AgLXIgL2hvbWUvJGdlbmVzaXNfdXNlci9ydW4vcnVudGltZS9rZXlzIC90bXAvCmZpCgojIGtpbGwgc2VydmVyCmVjaG8gIktpbGwgc2VydmVycy4uLiIKaWYgWyAkKGdyZXAgR0VORVNJU19IT01FIC1pYyAvaG9tZS8kZ2VuZXNpc191c2VyLy5iYXNocmMpIC1ndCAwIF0KdGhlbgogICAgZWNobyAiU3RvcHBpbmcgdGhlIGdlbmVzaXMgcGxhdGZvcm0iCiAgICBydW51c2VyIC1sICRnZW5lc2lzX3VzZXIgLWMgJ2VjaG8geSB8IGtpbGxTZXJ2ZXIgLS1hbGwnCiAgICBydW51c2VyIC1sICRnZW5lc2lzX3VzZXIgLWMgJ2tpbGxQcm9jZXNzIEdFTkVTSVNfQ0xVU1RFUicgICAKZmkKCiNCYWNrdXAgdGhlIGRhdGFiYXNlIGFjY29yZGluZyB0byB0aGUgY29uZmlnCmVjaG8gIk9ubHkgYmFja3VwIGRiIGlzIGRiX2JhY2t1cCBpcyBtZW50aW9uZWQgaW4gL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZiIKaWYgWyAkKHRlc3QgLWYgL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZiAmJiBlY2hvIDEgfHwgZWNobyAwKSAtZXEgMSBdICYmIFsgJChncmVwIGRiX2JhY2t1cCAtaWMgL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZikgLWd0IDAgXSAmJiBbICQoZ3JlcCBkYl9iYWNrdXAgL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZiB8IGN1dCAtZCAnPScgLWYgMikgPSAndHJ1ZScgXQp0aGVuCiAgICBlY2hvICJkYl9iYWNrdXAgaXMgdHJ1ZSBpbiAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mIgogICAgbWtkaXIgLXAgLyRyb290X2Rpci8kZ2VuZXNpc191c2VyL2JhY2t1cC8kc2VydmVyX2RpcgogICAgY2hvd24gLVIgJGdlbmVzaXNfdXNlci4kZ2VuZXNpc19ncnAgLyRyb290X2Rpci8kZ2VuZXNpc191c2VyL2JhY2t1cC8KICAgIHJ1bnVzZXIgLWwgJGdlbmVzaXNfdXNlciAtYyAiY2QgLyRyb290X2Rpci8kZ2VuZXNpc191c2VyL2JhY2t1cC8kc2VydmVyX2RpcjtKdm1SdW4gZ2xvYmFsLmdlbmVzaXMuZW52aXJvbm1lbnQuc2NyaXB0cy5EdW1wVGFibGUgLS1hbGw7Z3ppcCAqIgplbHNlCiAgICBlY2hvICJkYl9iYWNrdXAgaXMgZmFsc2UgaW4gL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZiBvciAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mIGlzIG5vdCBkZWZpbmVkIgpmaQoKIyBDcmVhdGUgaW5zdGFsbCBsb2cKZWNobyAiQ3JlYXRlIGluc3RhbGwgbG9nLi4iCkxPRz0vaG9tZS8kZ2VuZXNpc191c2VyL2dlbmVzaXNJbnN0YWxsXyQoZGF0ZSArJVktJW0tJWQtJUgtJU0pLmxvZwplY2hvICJHZW5lc2lzICRnZW5lc2lzX3VzZXIgSW5zdGFsbCBzdGFydGVkIGF0ICQoZGF0ZSkiID4+ICRMT0cKZWNobyAiR2VuZXNpcyAkZ2VuZXNpc191c2VyIEluc3RhbGwgc3RhcnRlZCBhdCAkKGRhdGUpIiAKY2hvd24gJGdlbmVzaXNfdXNlci4kZ2VuZXNpc19ncnAgJExPRwoKIyBFeHRyYWN0IGRpcmVjdG9yeSBzdHJ1Y3R1cmUKZWNobyAiZXh0cmFjdCB0aGUgc2VydnIgZGlyZWN0b3J5IHN0cnVjdHVyZSIKbWtkaXIgLXAgLyRyb290X2Rpci8kZ2VuZXNpc191c2VyL3NlcnZlci8kc2VydmVyX2Rpci9ydW4KY2QgLyRyb290X2Rpci8kZ2VuZXNpc191c2VyL3NlcnZlci8kc2VydmVyX2Rpci9ydW4vIAp0YXIgLXh6ZiAvdG1wL2dlbmVzaXNfcHJvZHVjdF9uYW1lX3BhY2thZ2UudGFyLmd6ICY+IC9kZXYvbnVsbApybSAtZiAvdG1wL2dlbmVzaXNfcHJvZHVjdF9uYW1lX3BhY2thZ2UudGFyLmd6CgojY29weSBydW50aW1lCmVjaG8gIkJhY2t1cCBhbmQgY29weSB0aGUgZXhpc3RpbmcgcnVudGltZSBmcm9tIHByZXZpb3VzIGluc3RhbGxhdGlvbnMsIGlmIGFueS4uLi4iCmlmIFsgJCh0ZXN0IC1kIC9ob21lLyRnZW5lc2lzX3VzZXIvcnVuL3J1bnRpbWUgJiYgZWNobyAxIHx8IGVjaG8gMCkgLWVxIDEgXQp0aGVuCiAgICByc3luYyAtciAvaG9tZS8kZ2VuZXNpc191c2VyL3J1bi9ydW50aW1lIC8kcm9vdF9kaXIvJGdlbmVzaXNfdXNlci9zZXJ2ZXIvJHNlcnZlcl9kaXIvcnVuLyA+PiAvdmFyL2xvZy9nZW5lc2lzX3NlcnZpY2UvY3Bfb3V0cHV0LnR4dApmaQoKZWNobyAiVW5saW5rIHByZXZpb3VzIHJ1biBhbmQgbGluayBpdCB0byB0aGUgcnVuIGRpciBvZiB0aGUgY3VycmVudCBpbnN0YWxsYXRpb24iCnVubGluayAvaG9tZS8kZ2VuZXNpc191c2VyL3J1bgpsbiAtcyAvJHJvb3RfZGlyLyRnZW5lc2lzX3VzZXIvc2VydmVyLyRzZXJ2ZXJfZGlyL3J1bi8gL2hvbWUvJGdlbmVzaXNfdXNlci9ydW4KY2hvd24gJGdlbmVzaXNfdXNlci4kZ2VuZXNpc19ncnAgL2hvbWUvJGdlbmVzaXNfdXNlci9ydW4KCiNDb3B5IHdlYiBpZiBleGlzdHMKZWNobyAiQ2hlY2sgaWYgd2ViIGlzIGJlaW5nIGRlcGxveWVkIC4uLiIKaWYgWyAtZiAvdG1wL2dlbmVzaXNfcHJvZHVjdF9uYW1lX3dlYi50YXIuZ3ogXQp0aGVuCiAgICBlY2hvICJXZWIgaXMgYmVpbmcgZGVwbG95ZWQgdG9vIC4uLiAiCiAgICBjZCAvJHJvb3RfZGlyLyRnZW5lc2lzX3VzZXIvCiAgICBta2RpciB3ZWItJChkYXRlICslWSVtJWQpCiAgICBjZCB3ZWItJChkYXRlICslWSVtJWQpCiAgICAjY2hlY2sgaWYgdGhlIHdlYiBhcHAgaXMgbm90IHRvIGJlIHNlcnZlZCBmcm9tIHJvb3QKICAgIGVjaG8gIkNoZWNrIGlmIG5ldyB3ZWIgaXNudGFsbGF0aW9uIGRpciBoYXMgYmVlbiBwcm92aWRlZCIKICAgIGlmIFsgJCh0ZXN0IC1mIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgJiYgZWNobyAxIHx8IGVjaG8gMCkgLWVxIDEgXSAmJiBbICQoZ3JlcCB3ZWJfcGF0aCAtaWMgL3RtcC9nZW5lc2lzX2luc3RhbGwuY29uZikgLWd0IDAgXQogICAgdGhlbgogICAgICAgIHdlYl9wYXRoPSQoZ3JlcCB3ZWJfcGF0aCAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mIHwgY3V0IC1kICc9JyAtZiAyKQogICAgICAgIG1rZGlyICR3ZWJfcGF0aAogICAgICAgIGNkICR3ZWJfcGF0aAogICAgICAgIGVjaG8gIm5ldyB3ZWIgaXNudGFsbGF0aW9uIGRpciBpcyA6ICR3ZWJfcGF0aCIKICAgIGZpCiAgICBlY2hvICJVbmxpbmsgb2xkIHdlYiBpbnN0YWxsYXRpb24gYW5kIHBvaW50IGl0IHRvIHRoZSBuZXcgd2ViIGZvbGRlciIKICAgIHRhciAteHpmICAvdG1wL2dlbmVzaXNfcHJvZHVjdF9uYW1lX3dlYi50YXIuZ3ogJj4gL2Rldi9udWxsCiAgICB1bmxpbmsgLyRyb290X2Rpci8kZ2VuZXNpc191c2VyL3dlYgogICAgbG4gLXMgLyRyb290X2Rpci8kZ2VuZXNpc191c2VyL3dlYi0kKGRhdGUgKyVZJW0lZCkvIC8kcm9vdF9kaXIvJGdlbmVzaXNfdXNlci93ZWIKICAgIHJtIC1mIC90bXAvZ2VuZXNpc19wcm9kdWN0X25hbWVfd2ViLnRhci5negpmaQoKY2hvd24gLVIgJGdlbmVzaXNfdXNlci4kZ2VuZXNpc19ncnAgLyRyb290X2Rpci8kZ2VuZXNpc191c2VyCgojIFNldCB1cCBiYXNocmMKZWNobyAiU2V0dGluZyB1cCBiYXNocmMgZm9yIHRoZSAkZ2VuZXNpc191c2VyIGlmIGl0cyBub3QgcHJlc2VudCIKaWYgWyAkKGdyZXAgR0VORVNJU19IT01FIC1pYyAvaG9tZS8kZ2VuZXNpc191c2VyLy5iYXNocmMpIC1lcSAwIF0KdGhlbgogICAgZWNobyAiZXhwb3J0IEdFTkVTSVNfSE9NRT1cJEhPTUUvcnVuLyIgPj4gL2hvbWUvJGdlbmVzaXNfdXNlci8uYmFzaHJjCiAgICBlY2hvICJbIC1mIFwkR0VORVNJU19IT01FL2dlbmVzaXMvdXRpbC9zZXR1cC5zaCBdICYmIHNvdXJjZSBcJEdFTkVTSVNfSE9NRS9nZW5lc2lzL3V0aWwvc2V0dXAuc2giID4+IC9ob21lLyRnZW5lc2lzX3VzZXIvLmJhc2hyYwogICAgZWNobyAiZXhwb3J0IEdST09WWV9IT01FPS9vcHQvZ3Jvb3Z5IiA+PiAvaG9tZS8kZ2VuZXNpc191c2VyLy5iYXNocmMKICAgIGVjaG8gIlBBVEg9XCRHUk9PVllfSE9NRS9iaW46XCRQQVRIIiA+PiAvaG9tZS8kZ2VuZXNpc191c2VyLy5iYXNocmMKICAgIGVjaG8gImJhc2hyYyBzZXR1cCBjb21wbGV0ZS4uLiIKZmkKCgppZiBbWyAoJCh0ZXN0IC1mIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgJiYgZWNobyAxIHx8IGVjaG8gMCkgLWVxIDApIHx8ICgoJCh0ZXN0IC1mIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgJiYgZWNobyAxIHx8IGVjaG8gMCkgLWVxIDEpICYmICgkKGdyZXAgcnVuX2V4ZWMgLWljIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYpIC1lcSAwKSB8fCAoKCQodGVzdCAtZiAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mICYmIGVjaG8gMSB8fCBlY2hvIDApIC1lcSAxKSAmJiAoJChncmVwIHJ1bl9leGVjIC1pYyAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSAtZ3QgMCkgJiYgKCQoc2VkIC1uICdzL15ydW5fZXhlYz1cKC4qXCkvXDEvcCcgPCAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSAhPSAiZmFsc2UiKSkpIF1dCnRoZW4KICBlY2hvICJydW5fZXhlYyBoYXMgYmVlbiBkZWZpbmVkIGluIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgYXM6ICQoc2VkIC1uICdzL15ydW5fZXhlYz1cKC4qXCkvXDEvcCcgPCAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSIKICAKICAjIFJ1biBjb21tYW5kIHRvIGNsZWFyIGNhY2hlCiAgZWNobyAiQ2hlY2sgaWYgc2l0ZS1zcGVjaWZpYyBzY3JpcHRzIGZvbGRlciBleGl0cy4uIgogIHJ1bnVzZXIgLWwgJGdlbmVzaXNfdXNlciAtYyAibHMgLWwgL2hvbWUvJGdlbmVzaXNfdXNlci9ydW4vL3NpdGUtc3BlY2lmaWMvc2NyaXB0cy8iCiAgZWNobyAiUnVubmluZyBHZW5lc2lzIGNhY2hlIGNsZWFyIGNvbW1hbmQiCiAgcnVudXNlciAtbCAkZ2VuZXNpc191c2VyIC1jICIvaG9tZS8kZ2VuZXNpc191c2VyL3J1bi9nZW5lc2lzL3NjcmlwdHMvdW5peC9weXRob24yL0dlbmVzaXNSdW4gLW1vZHVsZXM9Z2VuZXNpcy1lbnZpcm9ubWVudCBDbGVhckNvZGVnZW5DYWNoZS5ncm9vdnkiCiAgCiAgIyBSdW4gZ2VuZXNpc0luc3RhbGwKICBlY2hvICJSdW5uaW5nIEdlbmVzaXMgSW5zdGFsbCBzY3JpcHQiCiAgcnVudXNlciAtbCAkZ2VuZXNpc191c2VyIC1jICdnZW5lc2lzSW5zdGFsbCcKCiAgIyBSdW4gUmVtYXAKICBlY2hvICJSdW5uaW5nIFJlbWFwIgogIHJ1bnVzZXIgLWwgJGdlbmVzaXNfdXNlciAtYyAnZWNobyB5IHwgcmVtYXAgLS1jb21taXQgLS1mb3JjZScKZWxzZQogIGVjaG8gIi90bXAvZ2VuZXNpc19pbnN0YWxsIGlzIGFic2VudCBvciBydW5fZXhlYyBoYXMgYmVlbiBkZWZpbmVkIGluIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgYXM6ICQoc2VkIC1uICdzL15ydW5fZXhlYz1cKC4qXCkvXDEvcCcgPCAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSIKICBlY2hvICJnZW5lc2lzSW5zdGFsbCBhbmQgcmVtYXAgd2lsbCBub3QgYmUgcnVuIgpmaQoKIyBSZXN0b3JlIGJhY2t1cHMKaWYgW1sgLWQgL3RtcC9rZXlzIF1dIAp0aGVuCiAgICBlY2hvICJrZXlzIGRvIG5vdCBleGlzdCBpbiBydW50aW1lLiBSZXN0b3JpbmcgYmFja3VwIgogICAgY3AgLXIgL3RtcC9rZXlzIC9ob21lLyRnZW5lc2lzX3VzZXIvcnVuL3J1bnRpbWUvCiAgICBlY2hvICJCYWNrdXAga2V5cyByZXN0b3JlZCwgY2xlYW5pbmcgdXAiCiAgICBybSAtcmYgL3RtcC9rZXlzLwogICAgY2hvd24gLVIgJGdlbmVzaXNfdXNlcjokZ2VuZXNpc19ncnAgL2hvbWUvYXhlcy9ydW4vcnVudGltZS9rZXlzCmZpCgppZiBbWyAoJCh0ZXN0IC1mIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgJiYgZWNobyAxIHx8IGVjaG8gMCkgLWVxIDApIHx8ICgoJCh0ZXN0IC1mIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYgJiYgZWNobyAxIHx8IGVjaG8gMCkgLWVxIDEpICYmICgkKGdyZXAgcnVuX2V4ZWMgLWljIC90bXAvZ2VuZXNpc19pbnN0YWxsLmNvbmYpIC1lcSAwKSB8fCAoKCQodGVzdCAtZiAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mICYmIGVjaG8gMSB8fCBlY2hvIDApIC1lcSAxKSAmJiAoJChncmVwIHJ1bl9leGVjIC1pYyAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSAtZ3QgMCkgJiYgKCQoc2VkIC1uICdzL15ydW5fZXhlYz1cKC4qXCkvXDEvcCcgPCAvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mKSAhPSAiZmFsc2UiKSkpIF1dCnRoZW4KICAgICNTdGFydCB0aGUgc2VydmVyCgllY2hvICIvdG1wL2dlbmVzaXNfaW5zdGFsbC5jb25mIGZpbGUgYWJzZW50IG9yIHJ1bl9leGVjIG5vdCBkZWZpbmVkIC4uLi4gU3RhcnRpbmcgc2VydmVycyAuLi4uIgogICAgcnVudXNlciAtbCAkZ2VuZXNpc191c2VyIC1jICdzdGFydFNlcnZlcicKZmkKZWNobyAiR2VuZXNpcyAkZ2VuZXNpc191c2VyIEluc3RhbGwgZmluaXNoZWQgYXQgJChkYXRlKSIgPj4gJExPRwplY2hvICJJbnN0YWxsLnNoIGhhcyBjb21wbGV0ZWQgLi4uIgo=" | base64 -d > /tmp/install.sh
                sed -i "s/product_name/$PRODUCT_NAME/g" /tmp/install.sh
                echo "install.sh end"
                if [[ "$PRODUCT_NAME" == *"octo"* ]]
                then
                 sed -i "s/genesisUser/octo/g" /tmp/install.sh
                else
                 sed -i "s/genesisUser/$(echo $PRODUCT_NAME | sed -E 's/[0-9]+//g')/g" /tmp/install.sh
                fi
                mvn versions:set -DnewVersion=$VERSION
                mvn rpm:rpm        
                echo "PRODUCT NAME: ${{ env.PRODUCT_NAME }}"
                echo "RPM NAME: ${{ env.RPM_NAME }}"
                ls target/rpm/
                cd target/rpm/genesis-${PRODUCT_NAME}/RPMS/x86_64/${RPM_NAME}
                ls -lart
                echo "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/rpm/${{ env.CLIENT_NAME }}/"
                curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/rpm/${{ env.CLIENT_NAME }}/" -T *.rpm 
              fi
              done
