# This is a basic workflow to help you get started with Actions

name: Web Deploy

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true
      JFROG_NPM_AUTH_TOKEN:
        required: true
      GPR_READ_TOKEN:
        required: true
    
env:
  REPO_NAME: ${{ inputs.repo_name }}
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
      JFROG_NPM_AUTH_TOKEN: ${{secrets.JFROG_NPM_AUTH_TOKEN}}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      
      - name: Env Setup
        run:  |
              echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV #NOTE: only works with SSH repo urls + will cause issues with bny_investments
              echo "VERSION=$( git describe --tag --abbrev=0)" >> $GITHUB_ENV
              echo "PRODUCT_BASE=$(pwd)" >> $GITHUB_ENV
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-web-$(git describe --tags --abbrev=0).zip" >> $GITHUB_ENV
      
      - name: Sonar Setup
        run:  |
              echo "Sonar Setup:"
              date
              
              echo "sonar.projectKey="${{ env.REPO_NAME }} > sonar-project.properties
              echo "sonar.sources="${{ env.PRODUCT_BASE }}"/src" >> sonar-project.properties
      - name: Artifactory Setup
        run: |
              echo "Artifactory:"
              date
              #chmod 664 /usr/local/etc/npmrc
              npm config set @genesisglobal:registry https://genesisglobal.jfrog.io/artifactory/api/npm/npm-local/
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:always-auth true
              cat ~/.npmrc
              
      - name: Configure Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://genesisglobal.jfrog.io/artifactory/api/npm/github-packages/
          scope: '@genesislcap'
          
      - name: Install and NPM Config
        run:  |
              npm config set @genesisglobal:registry https://genesisglobal.jfrog.io/artifactory/api/npm/npm-local/
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:username ${{secrets.JFROG_USERNAME}}
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:_auth ${{secrets.JFROG_NPM_AUTH_TOKEN}}
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:email ${{secrets.JFROG_EMAIL}}
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:always-auth true
              echo "**************************************************************************************************************"
              echo "Install:"
              echo "**************************************************************************************************************"
              npm i
        env:
          NODE_AUTH_TOKEN: ${{secrets.GPR_READ_TOKEN}}    
      
    
      - name: Build
        run: |
              echo "Building Prod:"
              echo $(pwd)
              date
              npm run build
              pwd
              ls -larth
              echo "**************************************************************************************************************"
              ls -lrt www
        env:
          NODE_AUTH_TOKEN: ${{secrets.GPR_READ_TOKEN}}
            
      - name: Package and Publish
        run:  |
              echo "Package:"
              date
              sudo apt-get install zip unzip
              echo $(pwd)
              ln -s ./src/ src
              cd ./www/build
              ls
              pwd
              zip -r ${{ env.OUTPUT }} *
              ls 
              pwd
              echo ${{ env.OUTPUT }}
              ls | grep zip
              #curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/web/${{ env.OUTPUT }}" -T ${{ env.OUTPUT }} -v
